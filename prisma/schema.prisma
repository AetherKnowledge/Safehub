generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Student
  Counselor
  Admin
}

enum AppointmentStatus {
  Approved
  Pending
  Completed
  Rejected
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserStatus {
  Online
  Offline
  Busy
}

enum ChatType {
  GROUP
  DIRECT
}

enum CallStatus {
  Pending
  Accepted
  Rejected
  Ended
}

model User {
  id            String        @id @default(cuid())
  name          String?
  type          UserType      @default(Student)
  email         String        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastActiveAt  DateTime?     @default(now())
  status        UserStatus    @default(Offline)
  accounts      Account[]
  sessions      Session[]
  chatHistory   chathistory[]

  Student   Student?
  Counselor Counselor?
  Admin     Admin?

  chatMembers ChatMember[]
  messages    ChatMessage[]
  call        Call[]
  callMember  CallMember[]
}

model Chat {
  id          String   @id @default(cuid())
  type        ChatType @default(DIRECT)
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  call        Call?

  members  ChatMember[]
  messages ChatMessage[]
}

model Call {
  id        String     @id @default(cuid())
  chatId    String     @unique
  status    CallStatus @default(Pending)
  createdAt DateTime   @default(now())
  callerId  String
  chat      Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  caller     User         @relation(fields: [callerId], references: [id], onDelete: Cascade)
  callMember CallMember[]
}

model CallMember {
  id       String   @id @default(cuid())
  callId   String
  userId   String
  joinedAt DateTime @default(now())

  call Call @relation(fields: [callId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callId, userId]) // Prevent duplicate members in a call
}

model ChatMember {
  id       String   @id @default(cuid())
  chatId   String
  userId   String
  joinedAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId]) // Prevent duplicate members
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  chatId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  studentId    String        @id
  user         User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Counselor {
  counselorId    String          @id
  user           User            @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  available      Boolean         @default(false)
  AvailableSlots AvailableSlot[]
}

model Admin {
  adminId String @id
  user    User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model AvailableSlot {
  id          String    @id @default(cuid())
  counselor   Counselor @relation(fields: [counselorId], references: [counselorId], onDelete: Cascade)
  counselorId String
  day         Days
  startTime   String // Format: "09:00"
  endTime     String // Format: "12:00"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model chathistory {
  id         Int      @id @default(autoincrement())
  session_id String   @db.VarChar(255)
  message    Json
  user       User     @relation(fields: [session_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Appointment {
  id          Int               @id @default(autoincrement())
  studentId   String
  counselorId String
  status      AppointmentStatus @default(Pending)
  schedule    DateTime
  createdAt   DateTime          @default(now())
  student     Student           @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  counselor   Counselor         @relation(fields: [counselorId], references: [counselorId], onDelete: Cascade)
  concerns    String?
}
