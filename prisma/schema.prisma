generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  student
  counselor
  admin
}

enum AppointmentStatus {
  approved
  pending
  completed
  rejected
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  type                  UserType      @default(student)
  email                 String        @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  accounts              Account[]
  sessions              Session[]
  chatHistories         chathistory[]
  studentAppointments   Appointment[] @relation("StudentAppointments")
  counselorAppointments Appointment[] @relation("CounselorAppointments")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model chathistory {
  id         Int      @id @default(autoincrement())
  session_id String   @db.VarChar(255)
  message    Json
  user       User     @relation(fields: [session_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Appointment {
  id          Int               @id @default(autoincrement())
  studentId   String
  counselorId String
  status      AppointmentStatus @default(pending)
  schedule    DateTime
  createdAt   DateTime          @default(now())
  student     User              @relation("StudentAppointments", fields: [studentId], references: [id], onDelete: Cascade)
  counselor   User              @relation("CounselorAppointments", fields: [counselorId], references: [id], onDelete: Cascade)
}
