generator client {
  provider        = "prisma-client-js"
  output          = "../app/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["next_auth", "public"]
}

enum UserType {
  Student
  Counselor
  Admin

  @@schema("public")
}

enum AppointmentStatus {
  Approved
  Pending
  Completed
  Rejected

  @@schema("public")
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday

  @@schema("public")
}

enum ChatType {
  GROUP
  DIRECT

  @@schema("public")
}

enum CallStatus {
  Pending
  Accepted
  Rejected
  Ended

  @@schema("public")
}

enum UserStatus {
  Online
  Offline

  @@schema("public")
}

model Student {
  studentId    String        @id
  user         users         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@schema("public")
}

model Counselor {
  counselorId    String          @id
  user           users           @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  available      Boolean         @default(false)
  AvailableSlots AvailableSlot[]

  @@schema("public")
}

model Admin {
  adminId String @id
  user    users  @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Chat {
  id            String   @id @default(cuid())
  type          ChatType @default(DIRECT)
  name          String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  call          Call?

  members  ChatMember[]
  messages ChatMessage[]

  @@schema("public")
}

model ChatMember {
  id       String   @id @default(cuid())
  chatId   String
  userId   String
  joinedAt DateTime @default(now())

  chat Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId]) // Prevent duplicate members
  @@schema("public")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  chatId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Call {
  id        String     @id @default(cuid())
  chatId    String     @unique
  status    CallStatus @default(Pending)
  createdAt DateTime   @default(now())
  callerId  String
  chat      Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  caller     users        @relation(fields: [callerId], references: [id], onDelete: Cascade)
  callMember CallMember[]

  @@schema("public")
}

model CallMember {
  id       String   @id @default(cuid())
  socketId String
  callId   String
  userId   String
  joinedAt DateTime @default(now())

  call Call  @relation(fields: [callId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callId, userId]) // Prevent duplicate members in a call
  @@schema("public")
}

model AvailableSlot {
  id          String    @id @default(cuid())
  counselor   Counselor @relation(fields: [counselorId], references: [counselorId], onDelete: Cascade)
  counselorId String
  day         Days
  startTime   String // Format: "09:00"
  endTime     String // Format: "12:00"

  @@schema("public")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    String[] @db.VarChar(255) // Array of image URLs

  likes    Like[]
  dislikes Dislike[]

  comments Comment[]
  author   users     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // Prevent multiple likes from the same user on the same post
  @@schema("public")
}

model Dislike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // Prevent multiple dislikes from the same user on the same post
  @@schema("public")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model chathistory {
  id         Int      @id @default(autoincrement())
  session_id String   @db.VarChar(255)
  message    Json
  user       users    @relation(fields: [session_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@schema("public")
}

model Appointment {
  id          Int               @id @default(autoincrement())
  studentId   String
  counselorId String
  status      AppointmentStatus @default(Pending)
  schedule    DateTime
  createdAt   DateTime          @default(now())
  student     Student           @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  counselor   Counselor         @relation(fields: [counselorId], references: [counselorId], onDelete: Cascade)
  concerns    String?

  @@schema("public")
}

model accounts {
  id                 String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?    @unique(map: "email_unique")
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]

  //Extras
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type     UserType   @default(Student)
  password String?
  status   UserStatus @default(Offline)

  chatHistory chathistory[]

  Student   Student?
  Counselor Counselor?
  Admin     Admin?

  chatMembers ChatMember[]
  messages    ChatMessage[]

  call       Call[]
  callMember CallMember[]

  posts    Post[]
  likes    Like[]
  dislikes Dislike[]
  comments Comment[]

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}
